---
# tasks file for ansible-role-poudriere

- include_vars: "{{ ansible_os_family }}.yml"

- name: Assert poudriere_config_default has sane defaults
  assert:
    that:
      - "'BASEFS' in poudriere_config_default"
      - "'DISTFILES_CACHE' in poudriere_config_default"
      - poudriere_config_default.BASEFS is defined
      - poudriere_config_default.BASEFS | length > 0
      - poudriere_config_default.DISTFILES_CACHE is defined
      - poudriere_config_default.DISTFILES_CACHE | length > 0
    msg: "poudriere_config_default must have valid BASEFS and DISTFILES_CACHE"

- name: Assert items in poudriere_make_conf_files have `name` as key
  assert:
    msg: items in poudriere_make_conf_files must have `name` as key
    that:
      - "'name' in item"
      - item.name  is defined
      - item.name | length > 0
  with_items: "{{ poudriere_make_conf_files }}"

- name: Assert items in poudriere_make_conf_files have either present or absent in key `state`
  assert:
    msg: item in poudriere_make_conf_files must have `state` as key and its value must be either `present` or `absent`
    that:
      - "'state' in item"
      - "item.state == 'present' or item.state == 'absent'"
  with_items: "{{ poudriere_make_conf_files }}"

- name: Assert items with state `present` have `content` key
  assert:
    that:
      - "'content' in item"
      - item.content is defined
  with_items: "{{ poudriere_make_conf_files }}"
  when:
    - "item.state == 'present'"

- set_fact:
    poudriere_config_merged: "{{ poudriere_config_default | combine(poudriere_config, recursive = True) }}"

- include: install-{{ ansible_os_family }}.yml

- name: Create poudriere_conf_d
  file:
    dest: "{{ poudriere_conf_d }}"
    state: directory
    mode: 0755

- name: Create poudriere.conf
  template:
    src: poudriere.conf.j2
    dest: "{{ poudriere_conf }}"

- name: Create make.conf files
  template:
    src: make.conf.j2
    dest: "{{ poudriere_conf_d }}/{{ item.name }}"
  with_items: "{{ poudriere_make_conf_files }}"
  when:
    - "item.state == 'present'"

- name: Remove make.conf files
  file:
    dest: "{{ poudriere_conf_d }}/{{ item.name }}"
    state: absent
  with_items: "{{ poudriere_make_conf_files }}"
  when:
    - "item.state == 'absent'"

- name: Assert poudriere_pkg_repo_signing_key is defined when PKG_REPO_SIGNING_KEY is defined
  assert:
    that:
      - poudriere_pkg_repo_signing_key is defined
      - poudriere_pkg_repo_signing_key | length > 0
  when:
    - "'PKG_REPO_SIGNING_KEY' in poudriere_config_merged"

- name: Create a directory for PKG_REPO_SIGNING_KEY if specified
  file:
    dest: "{{ poudriere_config_merged['PKG_REPO_SIGNING_KEY'] | dirname }}"
    state: directory
  when:
      - "'PKG_REPO_SIGNING_KEY' in poudriere_config_merged"

- name: Create PKG_REPO_SIGNING_KEY if specified
  template:
    src: key.j2
    mode: 0600
    dest: "{{ poudriere_config_merged['PKG_REPO_SIGNING_KEY'] }}"
    validate: openssl rsa -check -noout -in %s
  when:
    - "'PKG_REPO_SIGNING_KEY' in poudriere_config_merged"

- name: Create hooks
  template:
    src: hook.sh.j2
    dest: "{{ poudriere_conf_d }}/hooks/{{ item.key }}.sh"
    mode: 0755
    validate: sh -n %s
  with_dict: "{{ poudriere_hooks }}"

- name: Assert DISTFILES_CACHE is defined and not empty
  assert:
    that:
      - "'DISTFILES_CACHE' in poudriere_config_merged"
      - poudriere_config_merged.DISTFILES_CACHE is defined
      - poudriere_config_merged.DISTFILES_CACHE | length > 0
    msg: "poudriere_config.DISTFILES_CACHE is undefined or empty: specify poudriere_config.DISTFILES_CACHE"

- name: Create DISTFILES_CACHE directory
  file:
    path: "{{ poudriere_config_merged.DISTFILES_CACHE }}"
    state: directory

- name: "Assert BASEFS is defined and not empty"
  assert:
    that:
      - "'BASEFS' in poudriere_config_merged"
      - poudriere_config_merged.BASEFS is defined
      - poudriere_config_merged.BASEFS | length > 0
    msg: "poudriere_config.BASEFS is undefined or empty: specify poudriere_config.BASEFS"

- name: Create BASEFS directory
  file:
    path: "{{ poudriere_config_merged.BASEFS }}"
    state: directory

- name: Get a list of ports tree
  shell: "poudriere ports -lq | awk '{ print $1 }'"
  register: register_ports_list
  changed_when: false
  always_run: yes

- name: Assert `state` exists in all ports in poudriere_ports
  assert:
    that:
      - '"state" in item.value'
    msg: "`state` must exist in all ports in poudriere_ports"
  with_dict: "{{ poudriere_ports }}"

- name: Assert `state` is either `present` or `absent` in poudriere_ports
  assert:
    that:
      - 'item.value.state == "present" or item.value.state == "absent"'
    msg: "`state` must be either `present` or `absent` in poudriere_ports"
  with_dict: "{{ poudriere_ports }}"

- name: Get a list of jails
  shell: "poudriere jails -lq | awk '{ print $1 }'"
  register: register_jails_list
  changed_when: false
  always_run: yes

- name: Assert `state` exists in all jails in poudriere_jails
  assert:
    that:
      - '"state" in item.value'
    msg: "`state` must exist in all jails poudriere_jails"
  with_dict: "{{ poudriere_ports }}"

- name: Assert `state` is either `present` or `absent` in poudriere_jails
  assert:
    that:
      - 'item.value.state == "present" or item.value.state == "absent"'
    msg: "`state` must be either `presnet` or `absent` in poudriere_jails"
  with_dict: "{{ poudriere_ports }}"

- name: Create ports tree
  command: "poudriere ports -c -p {{ item.key }}{% if 'method' in item.value %} -m {{ item.value.method }}{% endif %} {% if 'branch' in item.value %} -B {{ item.value.branch }}{% endif %} {% if 'path' in item.value %}-M '{{ item.value.path }}'{% endif %} {% if 'extra_flags' in item.value %}{{ item.value.extra_flags }}{% endif %}"
  args:
    creates: "{{ poudriere_config_merged.BASEFS }}/ports/{{ item.key }}"
  when:
    - 'item.value.state == "present"'
    - not item.key in register_ports_list.stdout_lines
  with_dict: "{{ poudriere_ports }}"

- name: Create jails 
  command: "poudriere jail -c -j {{ item.key }} -m {{ item.value.method }} -v {{ item.value.version }} {% if 'extra_flags' in item.value %}{{ item.value.extra_flags }}{% endif %}"
  args:
    creates: "{{ poudriere_config_merged.BASEFS }}/jails/{{ item.key }}"
  when:
    - 'item.value.state == "present"'
    - not item.key in register_jails_list.stdout_lines
  with_dict: "{{ poudriere_jails }}"

- name: Remove ports tree
  command: "poudriere ports -d -p {{ item.key }}"
  args:
    removes: "{{ poudriere_config_merged.BASEFS }}/ports/{{ item.key }}"
  when:
    - 'item.value.state == "absent"'
    - item.key in register_ports_list.stdout_lines
  with_dict: "{{ poudriere_ports }}"

- name: Remove jail
  command: "poudriere jails -d -j {{ item.key }}"
  args:
    removes: "{{ poudriere_config_merged.BASEFS }}/jails/{{ item.key }}"
  when:
    - 'item.value.state == "absent"'
    - item.key in register_jails_list.stdout_lines
  with_dict: "{{ poudriere_jails }}"
